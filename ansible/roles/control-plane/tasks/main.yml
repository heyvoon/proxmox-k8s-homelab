---
# roles/control-plane/tasks/main.yml (early in the role)
- name: Add Kubernetes apt repo (pkgs.k8s.io)
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
    filename: "kubernetes"
  become: true

- name: Ensure keyring dir exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
  become: true

- name: Install Kubernetes repo key
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: "0644"
  become: true

- name: Install kubelet, kubeadm, kubectl
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: true
  become: true

- name: Hold kube packages (avoid unintended upgrades)
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: true

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: cluster_initialized

- name: Initialize Kubernetes cluster (containerd)
  command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --service-cidr={{ service_network_cidr }}
    --apiserver-advertise-address={{ ansible_default_ipv4.address }}
    --control-plane-endpoint={{ control_plane_endpoint }}
    --upload-certs
    --cri-socket=unix:///run/containerd/containerd.sock
  when: not cluster_initialized.stat.exists
  register: kubeadm_init_output

- name: Create .kube directory for dev user
  file:
    path: /home/dev/.kube
    state: directory
    owner: dev
    group: dev
    mode: '0755'

- name: Copy admin.conf to dev user
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/dev/.kube/config
    owner: dev
    group: dev
    mode: '0644'
    remote_src: yes

# Generate a fresh join command (valid 1h) and expose it for workers to use
- name: Generate worker join command (TTL 1h)
  command: kubeadm token create --print-join-command --ttl 1h
  register: join_cmd
  changed_when: false
  # no delegation to localhost; run on the control-plane host

- name: Expose join command as host fact (for workers)
  set_fact:
    kube_join_cmd: "{{ join_cmd.stdout | trim }}"
    cacheable: false  # << must live INSIDE set_fact
